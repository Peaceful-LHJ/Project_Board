package com.project.controller.member;

import java.security.Principal;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.project.domain.member.MemberVO;
import com.project.exception.PasswordMisMatchException;
import com.project.repository.member.MemberRepository;
import com.project.service.member.MailSendService;
import com.project.service.member.MemberService;

import lombok.extern.log4j.Log4j;

@Log4j
@Controller
public class MemberController {
	
	@Autowired
	MemberService memberService;
	
	@Autowired
	MemberRepository memberRepository;
	
	@Autowired
	MailSendService mailSendService;
	
	// 마이페이지
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER')")
	@GetMapping({"/myPage", "/myPage/{path}"})
	public String myPage(Principal principal, Model model, @PathVariable(required = false) String path) {
		String memberId = principal.getName();
		if(path == null) {
			MemberVO memberVO = memberService.memberRead(memberId);
			model.addAttribute("vo", memberVO);
			return "member/myPage";
		}
		return "member/" + path;
	}
	
	@GetMapping({"/userPage","/userPage/{path}"})
	public String userPage(Principal principal, Model model, @PathVariable(required = false) String path) {
		String memberName = principal.getName();
		if(path == null) {
			MemberVO memberVO = memberService.memberRead(memberName);
			model.addAttribute("vo", memberVO);
			return "member/myPage";
		}
		return "member/userPage";
	}
	
	// 회원정보수정
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER')")
	@PostMapping("/member/modify")
	public String modify(MemberVO memberVO, RedirectAttributes rttr) {
		memberService.memberModify(memberVO);
		rttr.addFlashAttribute("result", "modify");
		return "redirect:/myPage";
	}
	
	// 비밀번호 변경 처리
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER')")
	@PostMapping(value = "/myPage/changePwd", produces = "plain/text; charset = utf-8")
	@ResponseBody
	public ResponseEntity<String> changePwd(@RequestParam Map<String, String> memberMap) {
		try {
			memberService.changePassword(memberMap);
		} catch (PasswordMisMatchException e) {
			return new ResponseEntity<String>("비밀번호가 일치하지 않습니다.",HttpStatus.UNAUTHORIZED);
		}
		
		return new ResponseEntity<String>("success", HttpStatus.OK);
	}
	
	// 약관 동의
	@GetMapping("/join/step1")
	public String step1() {
		return "member/step1";
	}
	
	// 이메일 인증
	@PostMapping("/join/step2")
	public String step2(@RequestParam(defaultValue = "false") List<Boolean> agreement) {
		
		log.info(agreement);
		
		if(agreement.size() >= 2 && agreement.stream().allMatch(v -> v)) {
			return "member/step2";
		}
		return "member/step1";
	}
	
	// 이메일 인증번호 요청
	@GetMapping("/mailCheck")
	@ResponseBody // ajax 호출이기에 달아준다.
	public String mailCheck(String email) {
		return mailSendService.joinEmail(email);
	}
	
	// 이메일 인증 완료
	@PostMapping("/join/step3")
	public String joinForm(MemberVO memberVO) {
		return "member/join";
	}
	
	// 회원가입 완료
	@PostMapping("/member/join")
	public String join(MemberVO memberVO, RedirectAttributes rttr) {
		memberService.memberJoin(memberVO);
		return "redirect:/";
	}
	
	// 아이디 중복 체크
	@PostMapping("/member/idCheck")
	@ResponseBody
	public ResponseEntity<Boolean> isDuplicateIdCheck(String memberId) {
		MemberVO vo = memberService.memberRead(memberId);
		return vo == null ? new ResponseEntity<Boolean>(Boolean.TRUE, HttpStatus.OK) :
			new ResponseEntity<Boolean>(Boolean.FALSE, HttpStatus.OK);
	}
	
	// 닉네임 중복 체크
	@PostMapping("/member/nameCheck")
	@ResponseBody
	public ResponseEntity<Boolean> isDuplicateNameCheck(String memberName) {
		MemberVO vo = memberService.memberRead(memberName);
		return vo == null ? new ResponseEntity<Boolean>(Boolean.TRUE, HttpStatus.OK) :
			new ResponseEntity<Boolean>(Boolean.FALSE, HttpStatus.OK);
	}
	
	// 404 에러 처리
	@GetMapping("/accessDenied")
	public String accessDenided() {
		return "/accessError";
	}
	
	// 로그인 페이지
	@RequestMapping("/login")
	public String loginPage(HttpServletRequest request, Authentication auth, RedirectAttributes rttr) {
		String uri = request.getHeader("Referer"); // 로그인 전 사용자가 보던 페이지
		if(uri != null && !uri.contains("/login")) { // 로그인 전 사용자가 보던 페이지를 세션에 저장
			request.getSession().setAttribute("prevPage", uri);
		}
		log.info(uri);
		
		log.info(auth);
		
		if(auth != null) { // 이미 로그인된 상태라면
			rttr.addFlashAttribute("duplicationLogin", "이미 로그인 중입니다");
			if(uri == null) uri="/";
			return "redirect:" + uri;
		}
		
		return "/login";
	}
	
}
