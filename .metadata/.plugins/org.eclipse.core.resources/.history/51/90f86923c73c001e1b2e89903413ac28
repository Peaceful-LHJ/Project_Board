package com.project.controller.member;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.project.domain.member.MemberVO;
import com.project.repository.member.MemberRepository;
import com.project.service.member.MemberService;

@Controller
public class MemberController {
	
	@Autowired
	MemberService memberService;
	
	@Autowired
	MemberRepository memberRepository;
	
	
	
	// 아이디 중복 체크
	@PostMapping("/member/idCheck")
	@ResponseBody
	public ResponseEntity<Boolean> isDuplicateIdCheck(String memberId) {
		MemberVO vo = memberService.read(memberId);
		return vo == null ? new ResponseEntity<Boolean>(Boolean.TRUE, HttpStatus.OK) :
			new ResponseEntity<Boolean>(Boolean.FALSE, HttpStatus.OK);
	}
	
	// 닉네임 중복 체크
	@PostMapping("/member/nameCheck")
	@ResponseBody
	public ResponseEntity<Boolean> isDuplicateNameCheck(String memberName) {
		MemberVO vo = memberService.read(memberName);
		return vo == null ? new ResponseEntity<Boolean>(Boolean.TRUE, HttpStatus.OK) :
			new ResponseEntity<Boolean>(Boolean.FALSE, HttpStatus.OK);
	}
	
	// 404 에러 처리
	@GetMapping("/accessDenied")
	public String accessDenided() {
		return "/accessError";
	}
	
	// 로그인 페이지
	@RequestMapping("/login")
	public String loginPage(HttpServletRequest request, Authentication auth, RedirectAttributes rttr) {
		String uri = request.getHeader("Referer"); // 로그인 전 사용자가 보던 페이지
		if(uri != null && !uri.contains("/login")) { // 로그인 전 사용자가 보던 페이지를 세션에 저장
			request.getSession().setAttribute("prevPage", uri);
		}
		log.info(uri);
		
		log.info(auth);
		
		if(auth != null) { // 이미 로그인된 상태라면
			rttr.addFlashAttribute("duplicationLogin", "이미 로그인 중입니다");
			if(uri == null) uri="/";
			return "redirect:" + uri;
		}
		
		return "member/login";
	}
	
}
