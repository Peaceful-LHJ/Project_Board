
package com.project.repository.board.boardDEL;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import com.project.AppTest;
import com.project.domain.board.boardDEL.BoardDelVO;
import com.project.domain.comment.CommentVO;
import com.project.domain.comment.commentDEL.CommentFromDelVO;
import com.project.repository.board.BoardRepository;
import com.project.repository.comment.CommentDelRepository;
import com.project.repository.comment.CommentRepository;

import lombok.extern.log4j.Log4j;

@Log4j
public class BoardDelRepositoryTest extends AppTest {
	
	@Autowired
	CommentDelRepository commentDelRepository;
	
	@Autowired
	CommentRepository commentRepository;
	
	@Autowired
	BoardDelRepository boardDelRepository;
	
	@Autowired
	BoardRepository boardRepository;
	
	@Ignore
	@Test
	public void boardDelInsertTest() { // 자유게시글 삭제 테이블 이동 및 해당 자유게시글 테이블 자료 처리테스트
		log.info("===== 테스트 시작 =====");
		Long bno = 1L; // 삭제할 자유게시판 번호
		log.info("===== 댓글유무 조회 실시 =====");
		List<CommentVO> boardCommentRead = commentRepository.boardCommentRead(bno); // 게시물의 댓글유무 조회
		if(boardCommentRead.isEmpty()) { // 댓글이 없는 경우
			log.info("===== 댓글없음 =====");
			log.info("===== 게시물 삭제테이블 이동 실시 =====");
			Long boardDelInsert = boardDelRepository.boardDelInsert(bno); // 게시물 삭제테이블 이동
			if(boardDelInsert != null) {
				log.info("데이터 가삭제 테이블 이동 실시완료!");
			}
			log.info("===== 게시물 삭제테이블 이동 성공여부 확인 실시 =====");
			BoardDelVO boardDelRead = boardDelRepository.boardDelRead(bno);
			if(boardDelRead == null) { // 정상적인 이동이 이뤄지지 않은 경우
				log.info("게시물 삭제 테이블 이동 실패!!");
				return;
			} else if(boardDelRead != null) { // 정상적으로 이동이 성공한 경우
				log.info("게시물 삭제 테이블 이동 성공!");
				log.info("===== 게시물 영구삭제 실시 =====");
				boardRepository.boardDelete(bno);
				log.info("게시물 영구삭제성공!");
			}
			log.info("===== 테스트 종료 =====");
			return;
		}
		if(boardCommentRead != null) { // 댓글이 있는 경우
			log.info("===== 댓글있음 =====");
			log.info("===== 댓글 가삭제 테이블 이동 실시 =====");
			commentDelRepository.NonBoardCommentDelInsert(bno); // 댓글 가삭제 테이블 이동
			CommentFromDelVO commentFromDelVO = commentDelRepository.NoncommentDelRead(bno); // 댓글 가삭제 테이블 정상이동 조회
			if(commentFromDelVO == null) { // 정상적인 이동이 이뤄지지 않은 경우
				log.info("댓글 가삭제 테이블 이동 실패!!");
				return;
			} else if(commentFromDelVO != null) { // 정상적으로 이동이 성공한 경우
				log.info("댓글 가삭제 테이블 이동 성공!");
				log.info("===== 댓글 영구삭제 실시 =====");
				commentRepository.commentListFromBoardDelete(bno);
				log.info("댓글 영구삭제성공!");
				log.info("===== 게시글 삭제테이블 이동 실시 =====");
				Long boardDelInsert = boardDelRepository.boardDelInsert(bno); // 게시글 삭제테이블 이동
				if(boardDelInsert == null) { // 게시글 삭제테이블 이동 실패한 경우
					log.info("게시글 삭제 테이블 이동 실패!!");
					return;
				} else if(boardDelInsert != null) {
					log.info("게시글 삭제 테이블 이동 성공!");
					log.info("===== 게시물 영구삭제 실시 =====");
					boardRepository.boardDelete(bno);
					log.info("게시물 영구삭제성공!");
				}
			}
		}
		log.info("===== 테스트 종료 =====");
	}
	
	@Ignore
	@Test
	public void boardDelReadTest() {
		BoardDelVO boardDelRead = boardDelRepository.boardDelRead(1L);
		log.info(boardDelRead);
	}
	
//	@Ignore
	@Test
	public void boardDelInsertListByNameTest() {
		List<BoardDelVO> boardDelInsertListByName = boardDelRepository.boardDelInsertListByName("작성자");
		log.info(boardDelInsertListByName);
	}
	
}
