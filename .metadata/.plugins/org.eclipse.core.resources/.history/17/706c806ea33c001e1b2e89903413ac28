package com.project.service.member;

import java.util.HashMap;
import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.project.AppTest;
import com.project.domain.member.MemberVO;
import com.project.repository.board.AnswerRepository;
import com.project.repository.board.BoardRepository;
import com.project.repository.board.QuestionBoardRepository;
import com.project.repository.board.boardDEL.AnswerDelRepository;
import com.project.repository.board.boardDEL.BoardDelRepository;
import com.project.repository.board.boardDEL.QuestionBoardDelRepository;
import com.project.repository.comment.CommentRepository;
import com.project.repository.comment.commentDEL.CommentDelRepository;
import com.project.repository.member.MemberRepository;
import com.project.repository.member.memberDEL.MemberDelRepository;

public class MemberServiceImplTest extends AppTest {
	
	@Autowired
	MemberRepository memberRepository;
	
	@Autowired
	MemberDelRepository memberDelRepository;
	
	@Autowired
	MemberService memberService;
	
	@Autowired
	PasswordEncoder passwordEncoder;
	
	@Autowired
	BoardRepository boardRepository;
	
	@Autowired
	BoardDelRepository boardDelRepository;
	
	@Autowired
	QuestionBoardRepository questionBoardRepository;
	
	@Autowired
	QuestionBoardDelRepository questionBoardDelRepository;
	
	@Autowired
	AnswerRepository answerRepository;
	
	@Autowired
	AnswerDelRepository answerDelRepository;
	
	@Autowired
	CommentRepository commentRepository;
	
	@Autowired
	CommentDelRepository commentDelRepository;
	
	@Ignore
	@Test
	public void memberJoinTest() { // 회원가입 테스트
		MemberVO vo = new MemberVO();
		vo.setMemberId("user");
		vo.setMemberPwd("1234");
		vo.setMemberName("사용자");
		vo.setEmail("user@test.com");
		memberService.memberJoin(vo);
	}
	
	@Ignore
	@Test
	public void memberModifyTest() { // 회원 정보 수정 테스트
		MemberVO selectById = memberRepository.selectById("admin");
		if(selectById != null) {
			selectById.setMemberName("관리자");
			memberService.memberModify(selectById);
		}
		System.out.println("존재하지 않는 회원입니다.");
	}
	
	@Ignore
	@Test
	public void memberReadTest() { // 회원 정보 보기 테스트
		MemberVO memberRead = memberService.memberRead("user");
		System.out.println(memberRead);
	}
	
	@Ignore
	@Test
	public void changePasswordTest() {
		String memberId = "user";
		String newPassword = "1111";
		String currentPassword = "1234";
		
		MemberVO vo = new MemberVO();
		vo.setMemberPwd(passwordEncoder.encode(currentPassword));
		
		Map<String, String> memberMap = new HashMap<>();
		memberMap.put("memberId", memberId);
		memberMap.put("newPassword", newPassword);
		memberMap.put("currentPassword", currentPassword);
		
		memberService.changePassword(memberMap);
		
	}
	
//	@Ignore
	@Test
	public void memberWithdrawTest() { // 회원탈퇴 서비스 테스트
		String memberId = "writer";
		String userName = memberRepository.selectByIdForName(memberId); // 해당 아이디의 회원 이름 추출
		
		// 회원 삭제전 무결성 검사 (작성한 자유게시글, 질문글, 답글, 댓글 유무 조회 -> 모두 작성되지 않은 경우)
		if(boardRepository.boardReadByName(userName).isEmpty()
				&& questionBoardRepository.questionBoardReadByName(userName).isEmpty()
				&& answerRepository.answerReadByName(userName).isEmpty()
				&& commentRepository.commentReadByName(userName).isEmpty()) {
			
			memberDelRepository.memberDelInsertByName(userName);
			memberRepository.memberDelete(memberId); // 회원 탈퇴 처리
			
		} else {
			commentDelRepository.allCommentDelInsertListByName(userName);
			commentRepository.allCommentDeleteByName(userName);
			answerDelRepository.answerDelInsertByName(userName);
			answerRepository.answerListDeleteByName(userName);
			boardDelRepository.boardDelInsertListByName(userName);
			boardRepository.boardDeleteListByName(userName);
			questionBoardDelRepository.questionBoardDelInsertByName(userName);
			questionBoardRepository.questionBoardDeleteListByName(userName);
			
			memberRepository.memberDelete(memberId); // 회원 탈퇴 처리
		}
	}
	
}
